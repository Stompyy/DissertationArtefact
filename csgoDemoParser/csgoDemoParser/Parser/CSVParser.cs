using System;
using System.Collections.Generic;
using System.IO;
using System.Windows.Forms;

namespace csgoDemoParser
{
    class CSVParser
    {
        /*
         * Allows selection of one or multiple rawData.csv files (the result of parsing a .dem file)
         * and writes a new player#.csv for each player name found in each parsed data file
         */
        public static void SelectAndParseRawDataCSV()
        {
            // Displays an OpenFileDialog so the user can select a .csv file.  
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "CSV files|*.csv";
            openFileDialog.Multiselect = true;
            openFileDialog.Title = "Select a rawData.csv file";

            // Show the Dialog.  
            // If the user clicked OK in the dialog and  
            // a .csv file was selected, open it.  
            if (openFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                // If more than one rawData.csv file has been selected
                foreach (string fileName in openFileDialog.FileNames)
                {
                    try
                    {
                        // Writes a new player#.csv for each player name found in the fileName.csv file
                        ParseCSVFileIntoPlayers(fileName);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Error: " + ex.ToString(), "Failed", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                    }
                }

                // Success message
                MessageBox.Show("Finished parsing rawData.csv file.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
        }

        /*
         * Opens the fileName file, and writes the each found player to a different relevant output stream until complete
         */
        public static void ParseCSVFileIntoPlayers(string fileName)
        {
            // Disposable string reader for easy clean up
            using (StreamReader stringReader = new StreamReader(fileName))
            {
                // This data structure uses the player name in the game as a key to the relevant output stream writer
                Dictionary<string, StreamWriter> playerStreamMap = new Dictionary<string, StreamWriter>();

                // First line is the column headers - ignore
                string headerLine = stringReader.ReadLine();

                string currentLine, playerName;
                string[] lineItems;
                
                // CurrentLine will be null when the StreamReader reaches the end of file
                while ((currentLine = stringReader.ReadLine()) != null)
                {
                    // Find the playerName from the currentLine
                    lineItems = currentLine.Split(',');
                    playerName = lineItems[0];

                    // Check the dictionary for that playerName key
                    if (playerStreamMap.ContainsKey(playerName))
                    {
                        // If already exists, then write the current line to that playerName's output stream writer
                        playerStreamMap[playerName].WriteLine(currentLine);
                    }
                    else
                    {
                        // Create a new output stream writer and entry for that playerName in the playerStreamMap data structure
                        // Create the fileName. Use the origonal fileName without extension + position in the dictionary as an arbitrary fileName distinguisher
                        string outputFileName = fileName.Split('.')[0] + ".player" + playerStreamMap.Count + ".csv";
                        // and open it. 
                        StreamWriter outputStream = new StreamWriter(outputFileName);

                        // Write the column headers
                        outputStream.WriteLine(headerLine);

                        // Add to dictionary
                        playerStreamMap.Add(playerName, outputStream);
                    }
                }

                // Finally close all stream writers
                foreach (StreamWriter stream in playerStreamMap.Values)
                {
                    stream.Close();
                }

                // Success message
                MessageBox.Show("Finished parsing .csv file.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
        }

        /*
         * Assumes that the user will select all number of Experiment.LevelAxisSubdivisions files generated by the stepped approach shown
         * in mainForm.cs, in the function CreateAverageVelocityTrendMasterCSVFromDatabase(). Otherwise an incomplete tructure will be returned
         * with null values in the missing columns. 
         * 
         * Saves the final master.csv ready to be loaded in for experimenting with.
         */
        public static Vector[,] ConstructMasterVelocityCSVFromVelocityColumnCSVs()
        {
            // Initialise the final velocity trend data structure
            Vector[,] returnArray = new Vector[Experiment.LevelAxisSubdivisions, Experiment.LevelAxisSubdivisions];

            // Displays an OpenFileDialog so the user can select a .csv file.  
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "CSV files|*.csv";
            openFileDialog.Multiselect = true;
            openFileDialog.Title = "Select path.csv files";

            // Show the Dialog.  
            // If the user clicked OK in the dialog and  
            // a .csv file was selected, open it.  
            if (openFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                string currentLine;

                // For each file write the contents to the newly created file
                foreach (string fileName in openFileDialog.FileNames)
                {
                    try
                    {
                        // Get which x column to fill in to the returnArray from the fileName naming convention from the stepped approach shown in mainForm.cs
                        if (int.TryParse(fileName.Split('.')[1], out int x))
                        {
                            // Use using to dispose of the stream reader after use
                            using (StreamReader reader = new StreamReader(fileName))
                            {
                                // ReadLine will return null at the end of the file
                                while ((currentLine = reader.ReadLine()) != null)
                                {
                                    // Get each value from the csv row
                                    string[] splitLine = currentLine.Split(',');

                                    // Fill out the appropriate column of the return array
                                    for (int y = 0; y < Experiment.LevelAxisSubdivisions; y++)
                                    {
                                        // Need to convert from the string representation to a string [] then to a Vector object 
                                        string[] splitCell = splitLine[y].Split(new string[] { "@value" }, StringSplitOptions.RemoveEmptyEntries);

                                        // Set the value
                                        returnArray[x, y] = new Vector(splitCell[0], splitCell[1], splitCell[2]);
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        // Else failed message
                        MessageBox.Show("Error: " + ex.ToString(), "Failed", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                    }
                }

                // Naming convention of the masterVelocityTrend.csv
                string outputFileName = "masterVelocityTrend" + Experiment.LevelAxisSubdivisions + ".csv";
                // and open it. 
                StreamWriter outputStream = new StreamWriter(outputFileName);

                // Write the return array to the output stream row by row
                for (int y = 0; y < Experiment.LevelAxisSubdivisions; y++)
                {
                    // Initialise an empty string
                    string outputRow = "";

                    // Write the Vectors to the string for the output Stream
                    for (int x = 0; x < Experiment.LevelAxisSubdivisions; x++)
                    {
                        outputRow += returnArray[x, y].ToMyEasierSplitString() + ",";
                    }

                    // Write the line to the output stream
                    outputStream.WriteLine(outputRow);
                }

                // Close the stream
                outputStream.Close();

                // Success message
                MessageBox.Show("Finished master velocity trend file!!!.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }

            // Finally return the data structure to update the mainForm class variable
            return returnArray;
        }
    }
}
